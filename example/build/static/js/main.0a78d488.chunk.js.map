{"version":3,"sources":["modules/treatment_decisions_solver/inputs.js","modules/treatment_decisions_solver/helpers.js","modules/treatment_decisions_solver/index.js","components/FileDropzone/index.js","App.js","index.js"],"names":["fs","require","processInput","input","inputData","split","nDoctors","Number","suggestionsList","slice","filter","e","includes","map","doctor","arr","treats","trim","leaves","module","exports","inputPrompt","callback","prompt","type","name","message","result","answer","validate","test","then","filepath","catch","console","error","getInput","data","readFileSync","pipe","fns","x","reduce","v","f","mostFrequentInArray","counts","a","c","highest","Object","keys","k","id","count","sort","b","n","maxNbrOfSatisfiedDoctors","doctorsListWithMatches","acc","curr","i","listDoctorsWithConflicts","getMaxSatisfiedCount","suggestions","currentDoctor","index","isConflicted","some","p","objectSpread2","conflicts","JSON","parse","stringify","allConflicts","length","mostFrequentConflicts","mostFrequentConflict","d","removeConflictFromArray","array","number","indexOf","splice","getResult","FileDropzone","props","_useDropzone","useDropzone","accept","onDrop","acceptedFiles","forEach","file","reader","FileReader","onabort","log","onerror","onload","value","onChange","handleChange","readAsText","fileRejections","getRootProps","getInputProps","react_default","createElement","key","path","className","fileRejectionItems","errors","concat","assign","App","_useState","useState","_useState2","slicedToArray","output","setOutput","components_FileDropzone","results","Fragment","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0a78d488.chunk.js","sourcesContent":["const fs = require('fs');\r\n\r\nconst getInput = filepath => {\r\n    const data = fs.readFileSync(filepath, 'utf8');\r\n    return processInput(data);\r\n};\r\n\r\nconst processInput = input => { // Extract number of doctors and an array of their suggestions\r\n    const inputData = input.split('\\n'),\r\n        nDoctors = Number(inputData[0]),\r\n        suggestionsList = inputData.slice(2).filter(e => e.includes('#')).map(doctor => {\r\n            let arr = doctor.split('#');\r\n            return ({\r\n                treats: arr[0] !== '' ? arr[0].trim().split(' ').map(Number) : [],\r\n                leaves: arr[1] !== '' ? arr[1].trim().split(' ').map(Number) : []\r\n            })\r\n        })\r\n    return ({ suggestionsList, nDoctors })\r\n}\r\n\r\nconst inputPrompt = callback => { // Allows adding input from command line \r\n    prompt({\r\n        type: 'input',\r\n        name: 'filepath',\r\n        message: 'Enter input path',\r\n        result: answer => answer.trim(),\r\n        validate: answer => {\r\n            const regex = /(.)+(\\.txt$)/;\r\n            const isValid = regex.test(answer)\r\n            return isValid ? true : 'Input must be a *.txt file'\r\n        }\r\n    })\r\n        .then(answer => callback(answer.filepath))\r\n        .catch(console.error);\r\n};\r\nmodule.exports = { inputPrompt, getInput, processInput }","const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);\r\n\r\nconst mostFrequentInArray = arr => {\r\n    let counts = arr.reduce((a, c) => {\r\n        a[c] = (a[c] || 0) + 1;\r\n        return a;\r\n    }, {});\r\n    const highest = Object.keys(counts).map(k => ({ id: Number(k), count: counts[k] }))\r\n    const tops = highest.sort((a, b) => b.count - a.count).filter(n => n.count === highest[0].count)\r\n    return tops\r\n}\r\n\r\nmodule.exports = { pipe, mostFrequentInArray }","const { processInput } = require('./inputs');\r\nconst { pipe, mostFrequentInArray } = require('./helpers');\r\n\r\nconst maxNbrOfSatisfiedDoctors = ({ suggestionsList }) => {\r\n    const doctorsListWithMatches = suggestionsList.reduce((acc, curr, i) =>\r\n        [...acc, listDoctorsWithConflicts(suggestionsList, curr, i)], []);\r\n    // New Suggestion list with, for each doctor their matches and conflicts \r\n\r\n    return getMaxSatisfiedCount(doctorsListWithMatches)\r\n}\r\n\r\nconst listDoctorsWithConflicts = (suggestions, currentDoctor, id) => suggestions.reduce((acc, curr, index) => {\r\n    const { treats, leaves } = curr;\r\n    const isConflicted = treats.some(p => currentDoctor.leaves.includes(p)) || leaves.some(p => currentDoctor.treats.includes(p))\r\n    return ({\r\n        ...acc,\r\n        conflicts: isConflicted ? [...acc.conflicts, index] : [...acc.conflicts]\r\n    })\r\n}, { id: id, ...currentDoctor, conflicts: [] })\r\n\r\nconst getMaxSatisfiedCount = suggestionsList => {\r\n    let suggestions = JSON.parse(JSON.stringify(suggestionsList));\r\n\r\n    while (true) {\r\n        let allConflicts = suggestions.reduce((acc, curr) => [...acc, ...curr.conflicts], [])\r\n        if (allConflicts.length === 0) break // Stop if there are no more conflicts\r\n\r\n        const mostFrequentConflicts = mostFrequentInArray(allConflicts).map(c => c.id)\r\n        const mostFrequentConflict = JSON.parse(JSON.stringify(suggestionsList))\r\n            .filter(d => mostFrequentConflicts.includes(d.id))\r\n            .sort((a, b) => b.conflicts.length - a.conflicts.length)[0].id\r\n        // Get most frequent conflict that has most conflicts with others\r\n        \r\n        suggestions = suggestions.filter(e => e.id !== mostFrequentConflict); // Remove most frequent doctor in conflicts\r\n        removeConflictFromArray(suggestions, mostFrequentConflict) // Also remove it from doctor's conflicts\r\n    }\r\n    return suggestions.length;\r\n}\r\n\r\nconst removeConflictFromArray = (array, number) => array.filter(c => {\r\n    const index = c.conflicts.indexOf(number);\r\n    if (index > -1) {\r\n        c.conflicts.splice(index, 1);\r\n    }\r\n    return c\r\n})\r\n\r\nexport const getResult = input => pipe(processInput, maxNbrOfSatisfiedDoctors)(input)\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { useDropzone, } from 'react-dropzone';\r\nimport './style.css';\r\n\r\nfunction FileDropzone(props) {\r\n\r\n    const handleChange = value => {\r\n        props.onChange(value);\r\n    }\r\n    const onDrop = acceptedFiles => {\r\n        acceptedFiles.forEach((file) => {\r\n            const reader = new FileReader()\r\n\r\n            reader.onabort = () => console.log('file reading was aborted')\r\n            reader.onerror = () => console.log('file reading has failed')\r\n            reader.onload = () => {\r\n                const binaryStr = reader.result\r\n                return handleChange(binaryStr)\r\n            }\r\n            reader.readAsText(file)\r\n        })\r\n    }\r\n    const { fileRejections, getRootProps, getInputProps, acceptedFiles } = useDropzone({\r\n        accept: '.txt',\r\n        onDrop\r\n    })\r\n\r\n    const file = acceptedFiles.map(file => (<div key={file.path}>\r\n        <hr />\r\n        <p className=\"show-input\">Input: {file.path}</p>\r\n    </div>\r\n    ));\r\n\r\n    const fileRejectionItems = fileRejections.map((file, errors) => (<p key={`${file.path}_error`} className=\"error\">This file is not supported.<br />\r\n      You can only import *.txt files\r\n        {fileRejections[0].a}\r\n    </p>\r\n    ));\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"dropzone\" {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                <p>Drag and drop your input file here, <br />\r\n            or click to select files</p>\r\n            </div>\r\n            {file}\r\n            {fileRejectionItems}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FileDropzone;","import React, { useState } from 'react'\r\nimport \"./styles.css\";\r\nimport { getResult } from './modules/treatment_decisions_solver';\r\nimport FileDropzone from './components/FileDropzone';\r\n\r\nexport default function App() {\r\n\r\n  const [output, setOutput] = useState();\r\n\r\n  const handleChange = value => {\r\n    const results = getResult(value);\r\n    setOutput(results)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"title\">Patient Treatment Solver</h1>\r\n      <FileDropzone onChange={handleChange} />\r\n        \r\n\r\n      {output && (<>            \r\n        <h2 className=\"label\">Result</h2>\r\n        <p className=\"result\">{output}</p>\r\n      </>)}\r\n    </div>)\r\n}\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}